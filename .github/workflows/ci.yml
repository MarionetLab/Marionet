name: CI - 代码质量检查

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  GODOT_VERSION: "4.5-stable"
  DOTNET_VERSION: "8.0.x"

jobs:
  # 1. GDScript 语法和风格检查
  gdscript-check:
    name: GDScript 检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装 gdlint
        run: |
          pip install gdtoolkit==4.*

      - name: 运行 GDScript 语法检查
        run: |
          cd engine
          gdlint --version
          gdlint renderer/scripts/ renderer/services/ renderer/ui/ core/ || echo "警告: 发现代码风格问题"

  # 2. C# 编译检查
  csharp-build:
    name: C# 编译检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 下载 Godot
        run: |
          wget -q https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_mono_linux_x86_64.zip
          unzip -q Godot_v${{ env.GODOT_VERSION }}_mono_linux_x86_64.zip
          chmod +x Godot_v${{ env.GODOT_VERSION }}_mono_linux_x86_64/Godot_v${{ env.GODOT_VERSION }}_mono_linux.x86_64

      - name: C# 项目编译检查
        run: |
          cd engine
          dotnet build MarionetEngine.csproj --configuration Release
        continue-on-error: false

  # 3. Godot 项目基础检查
  godot-project-check:
    name: Godot 项目结构检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查必需的项目文件
        run: |
          cd engine

          echo "检查 Godot 项目文件..."

          # 检查必需文件是否存在
          required_files=(
            "project.godot"
            "core/Main.gd"
            "core/ServiceLocator.gd"
            "core/Constants.gd"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "❌ 缺少必需文件:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi

          echo "✓ 所有必需项目文件都存在"

          # 检查 project.godot 格式
          if ! grep -q "config_version=5" project.godot; then
            echo "❌ project.godot 格式可能有误"
            exit 1
          fi

          echo "✓ project.godot 格式正确"

          # 检查场景文件格式（简单验证）
          echo "检查场景文件..."
          for scene in scenes/*.tscn; do
            if [ -f "$scene" ]; then
              if ! head -n 1 "$scene" | grep -q "gd_scene"; then
                echo "⚠️  $scene 可能不是有效的场景文件"
              fi
            fi
          done

          echo "✓ Godot 项目结构检查完成"
          echo ""
          echo "注意: CI 环境不包含 GDCubism 插件，这是正常的。"
          echo "插件相关的错误在 CI 中会被忽略。"

  # 4. 文件结构和命名规范检查
  file-structure-check:
    name: 文件结构检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查文件命名规范
        run: |
          cd engine
          # 检查 GDScript 文件是否使用 PascalCase
          echo "检查 GDScript 文件命名..."
          find renderer/services renderer/scripts core -name "*.gd" | while read file; do
            filename=$(basename "$file" .gd)
            if ! [[ "$filename" =~ ^[A-Z][a-zA-Z0-9]*$ ]]; then
              echo "警告: $file 不符合 PascalCase 命名规范"
            fi
          done

          # 检查 C# 文件是否使用 PascalCase
          echo "检查 C# 文件命名..."
          find renderer/services -name "*.cs" | while read file; do
            filename=$(basename "$file" .cs)
            if ! [[ "$filename" =~ ^[A-Z][a-zA-Z0-9]*$ ]]; then
              echo "警告: $file 不符合 PascalCase 命名规范"
            fi
          done

      - name: 检查禁止提交的文件
        run: |
          # 检查是否意外提交了 bin 文件
          if find engine/addons/gd_cubism/bin -name "*.dll" -o -name "*.so" -o -name "*.dylib" 2>/dev/null | grep -q .; then
            echo "错误: 检测到不应提交的插件二进制文件"
            echo "请将以下文件添加到 .gitignore:"
            find engine/addons/gd_cubism/bin -name "*.dll" -o -name "*.so" -o -name "*.dylib"
            exit 1
          fi

  # 5. 文档同步检查
  documentation-check:
    name: 文档完整性检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查必需文档
        run: |
          required_docs=(
            "README.md"
            "docs/CONTRIBUTING.md"
            "docs/CODING_STANDARDS.md"
            "docs/architecture/architecture.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "错误: 缺少必需文档 $doc"
              exit 1
            fi
          done

          echo "所有必需文档都存在 ✓"

      - name: 检查 Markdown 格式
        uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          globs: |
            docs/**/*.md
            *.md
        continue-on-error: true

  # 6. 代码安全扫描
  security-check:
    name: 安全检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查敏感信息
        run: |
          echo "检查是否泄露敏感信息..."

          # 检查硬编码的密钥、密码等
          if grep -r -i -E "(password|secret|api_key|token)\s*=\s*['\"][^'\"]+['\"]" engine/ --include="*.gd" --include="*.cs" | grep -v "test" | grep -v "example"; then
            echo "警告: 发现可能的硬编码敏感信息"
            exit 1
          fi

          echo "未发现明显的敏感信息 ✓"

  # 汇总结果
  ci-summary:
    name: CI 检查汇总
    runs-on: ubuntu-latest
    needs: [gdscript-check, csharp-build, godot-project-check, file-structure-check, documentation-check, security-check]
    if: always()
    steps:
      - name: 检查所有任务状态
        run: |
          echo "=========================================="
          echo "  CI 检查汇总"
          echo "=========================================="
          echo ""
          echo "✓ GDScript 检查: ${{ needs.gdscript-check.result }}"
          echo "✓ C# 编译检查: ${{ needs.csharp-build.result }}"
          echo "✓ Godot 项目检查: ${{ needs.godot-project-check.result }}"
          echo "✓ 文件结构检查: ${{ needs.file-structure-check.result }}"
          echo "✓ 文档检查: ${{ needs.documentation-check.result }}"
          echo "✓ 安全检查: ${{ needs.security-check.result }}"
          echo ""
          echo "=========================================="

          # 注意事项
          echo ""
          echo "📝 注意事项:"
          echo "- CI 环境不包含 GDCubism 插件（插件不提交到仓库）"
          echo "- 依赖插件的代码在 CI 中会有警告，这是正常的"
          echo "- 上述检查专注于可在无插件环境下验证的内容"
          echo ""

      - name: 验证关键检查通过
        if: |
          needs.gdscript-check.result != 'success' ||
          needs.csharp-build.result != 'success' ||
          needs.godot-project-check.result != 'success' ||
          needs.file-structure-check.result != 'success'
        run: |
          echo "❌ 关键检查未通过，请修复后重新提交"
          echo ""
          echo "失败的检查:"
          [ "${{ needs.gdscript-check.result }}" != "success" ] && echo "  - GDScript 检查"
          [ "${{ needs.csharp-build.result }}" != "success" ] && echo "  - C# 编译检查"
          [ "${{ needs.godot-project-check.result }}" != "success" ] && echo "  - Godot 项目检查"
          [ "${{ needs.file-structure-check.result }}" != "success" ] && echo "  - 文件结构检查"
          exit 1

      - name: 检查通过
        if: |
          needs.gdscript-check.result == 'success' &&
          needs.csharp-build.result == 'success' &&
          needs.godot-project-check.result == 'success' &&
          needs.file-structure-check.result == 'success'
        run: |
          echo ""
          echo "🎉 所有关键检查通过！"
          echo ""

